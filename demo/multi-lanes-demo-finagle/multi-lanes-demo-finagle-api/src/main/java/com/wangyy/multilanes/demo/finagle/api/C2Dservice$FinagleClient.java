/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.wangyy.multilanes.demo.finagle.api;

import com.twitter.finagle.SourcedException;
import com.twitter.finagle.stats.Counter;
import com.twitter.finagle.stats.StatsReceiver;
import com.twitter.finagle.thrift.ThriftClientRequest;
import com.twitter.util.Function;
import com.twitter.util.Function2;
import com.twitter.util.Future;
import com.twitter.util.FutureEventListener;
import com.twitter.scrooge.Option;
import com.twitter.scrooge.ThriftStruct;
import com.twitter.scrooge.ThriftStructCodec;
import com.twitter.scrooge.ThriftStructCodec3;
import com.twitter.scrooge.Utilities;

import org.apache.thrift.TApplicationException;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.*;
import org.apache.thrift.transport.TMemoryBuffer;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TTransport;

import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.wangyy.multilanes.demo.finagle.api.C2Dservice.*;


public class C2Dservice$FinagleClient implements C2Dservice.FutureIface {
  private com.twitter.finagle.Service<ThriftClientRequest, byte[]> service;
  private String serviceName;
  private TProtocolFactory protocolFactory /* new TBinaryProtocol.Factory */;
  private StatsReceiver scopedStats;

  public C2Dservice$FinagleClient(
    com.twitter.finagle.Service<ThriftClientRequest, byte[]> service,
    TProtocolFactory protocolFactory /* new TBinaryProtocol.Factory */,
    String serviceName,
    StatsReceiver stats
  ) {
    this.service = service;
    this.serviceName = serviceName;
    this.protocolFactory = protocolFactory;
    if (serviceName != "") {
      this.scopedStats = stats.scope(serviceName);
    } else {
      this.scopedStats = stats;
    }
  }

  // ----- boilerplate that should eventually be moved into finagle:

  protected ThriftClientRequest encodeRequest(String name, ThriftStruct args) {
    TMemoryBuffer buf = new TMemoryBuffer(512);
    TProtocol oprot = protocolFactory.getProtocol(buf);

    try {
      oprot.writeMessageBegin(new TMessage(name, TMessageType.CALL, 0));
      args.write(oprot);
      oprot.writeMessageEnd();
    } catch (TException e) {
      // not real.
    }

    byte[] bytes = Arrays.copyOfRange(buf.getArray(), 0, buf.length());
    return new ThriftClientRequest(bytes, false);
  }

  protected <T extends ThriftStruct> T decodeResponse(byte[] resBytes, ThriftStructCodec<T> codec) throws TException {
    TProtocol iprot = protocolFactory.getProtocol(new TMemoryInputTransport(resBytes));
    TMessage msg = iprot.readMessageBegin();
    try {
      if (msg.type == TMessageType.EXCEPTION) {
        TException exception = TApplicationException.read(iprot);
        if (exception instanceof SourcedException) {
          if (this.serviceName != "") ((SourcedException) exception).serviceName_$eq(C2Dservice$FinagleClient.this.serviceName);
        }
        throw exception;
      } else {
        return codec.decode(iprot);
      }
    } finally {
      iprot.readMessageEnd();
    }
  }

  protected Exception missingResult(String name) {
    return new TApplicationException(
      TApplicationException.MISSING_RESULT,
      "`" + name + "` failed: unknown result"
    );
  }

  protected class __Stats {
    public Counter requestsCounter, successCounter, failuresCounter;
    public StatsReceiver failuresScope;

    public __Stats(String name) {
      StatsReceiver scope = C2Dservice$FinagleClient.this.scopedStats.scope(name);
      this.requestsCounter = scope.counter0("requests");
      this.successCounter = scope.counter0("success");
      this.failuresCounter = scope.counter0("failures");
      this.failuresScope = scope.scope("failures");
    }
  }

  // ----- end boilerplate.

  private __Stats ___stats_c2d;
  
  private __Stats __stats_c2d() {
    if (___stats_c2d == null) {
      ___stats_c2d = new __Stats("c2d");
    }
    return ___stats_c2d;
  }
  
  
  public Future<String> c2d(String msg) {
    __stats_c2d().requestsCounter.incr();
  
    Future<String> rv = this.service.apply(encodeRequest("c2d", new C2d.Args(msg))).flatMap(new Function<byte[], Future<String>>() {
  
      public Future<String> apply(byte[] in) {
        try {
          C2d.Result result = decodeResponse(in, C2d.Result.CODEC);
  
  
  
          if (result.success.isDefined()) return Future.value(result.success.get());
          return Future.exception(missingResult("c2d"));
        } catch (TException e) {
          return Future.exception(e);
        }
      }
    }).rescue(new Function<Throwable, Future<String>>() {
      public Future<String> apply(Throwable t) {
        if (t instanceof SourcedException) {
          ((SourcedException) t).serviceName_$eq(C2Dservice$FinagleClient.this.serviceName);
        }
        return Future.exception(t);
      }
    });
  
    rv.addEventListener(new FutureEventListener<String>() {
      public void onSuccess(String result) {
        __stats_c2d().successCounter.incr();
      }
  
      public void onFailure(Throwable t) {
        if (t instanceof SourcedException) {
          ((SourcedException) t).serviceName_$eq(C2Dservice$FinagleClient.this.serviceName);
        }
        __stats_c2d().failuresCounter.incr();
        __stats_c2d().failuresScope.counter0(t.getClass().getName()).incr();
      }
    });
  
    return rv;
  }
}