/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.wangyy.multilanes.demo.finagle.api;

import com.twitter.finagle.SourcedException;
import com.twitter.finagle.stats.Counter;
import com.twitter.finagle.stats.NullStatsReceiver;
import com.twitter.finagle.stats.StatsReceiver;
import com.twitter.finagle.thrift.ThriftClientRequest;
import com.twitter.util.Function;
import com.twitter.util.Function2;
import com.twitter.util.Future;
import com.twitter.util.FutureEventListener;
import com.twitter.scrooge.Option;
import com.twitter.scrooge.ThriftStruct;
import com.twitter.scrooge.ThriftStructCodec;
import com.twitter.scrooge.ThriftStructCodec3;
import com.twitter.scrooge.Utilities;

import org.apache.thrift.TApplicationException;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.*;
import org.apache.thrift.transport.TMemoryBuffer;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TTransport;

import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.wangyy.multilanes.demo.finagle.api.C2Dservice.*;


public class C2Dservice$FinagleService extends com.twitter.finagle.Service<byte[], byte[]> {
  final private C2Dservice.FutureIface iface;
  final private TProtocolFactory protocolFactory;

  public C2Dservice$FinagleService(final C2Dservice.FutureIface iface, final TProtocolFactory protocolFactory) {
    this.iface = iface;
    this.protocolFactory = protocolFactory;

    addFunction("c2d", new Function2<TProtocol, Integer, Future<byte[]>>() {
      public Future<byte[]> apply(TProtocol iprot, final Integer seqid) {
        try {
          C2d.Args args = C2d.Args.decode(iprot);
          iprot.readMessageEnd();
          Future<String> result;
          try {
            result = iface.c2d(args.msg);
          } catch (Throwable t) {
            result = Future.exception(t);
          }
          return result.flatMap(new Function<String, Future<byte[]>>() {
            public Future<byte[]> apply(String value){
              return reply("c2d", seqid, new C2d.Result.Builder().success(value).build());
            }
          }).rescue(new Function<Throwable, Future<byte[]>>() {
            public Future<byte[]> apply(Throwable t) {
              return Future.exception(t);
            }
          });
        } catch (TProtocolException e) {
          try {
            iprot.readMessageEnd();
            return exception("c2d", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage());
          } catch (Exception unrecoverable) {
            return Future.exception(unrecoverable);
          }
        } catch (Throwable t) {
          return Future.exception(t);
        }
      }
    });
  }

  // ----- boilerplate that should eventually be moved into finagle:

  protected Map<String, Function2<TProtocol, Integer, Future<byte[]>>> functionMap =
    new HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>>();

  protected void addFunction(String name, Function2<TProtocol, Integer, Future<byte[]>> fn) {
    functionMap.put(name, fn);
  }

  protected Function2<TProtocol, Integer, Future<byte[]>> getFunction(String name) {
    return functionMap.get(name);
  }

  protected Future<byte[]> exception(String name, int seqid, int code, String message) {
    try {
      TApplicationException x = new TApplicationException(code, message);
      TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
      TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

      oprot.writeMessageBegin(new TMessage(name, TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.getTransport().flush();
      return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
    } catch (Exception e) {
      return Future.exception(e);
    }
  }

  protected Future<byte[]> reply(String name, int seqid, ThriftStruct result) {
    try {
      TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
      TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

      oprot.writeMessageBegin(new TMessage(name, TMessageType.REPLY, seqid));
      result.write(oprot);
      oprot.writeMessageEnd();

      return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
    } catch (Exception e) {
      return Future.exception(e);
    }
  }

  public final Future<byte[]> apply(byte[] request) {
    TTransport inputTransport = new TMemoryInputTransport(request);
    TProtocol iprot = protocolFactory.getProtocol(inputTransport);

    try {
      TMessage msg = iprot.readMessageBegin();
      Function2<TProtocol, Integer, Future<byte[]>> f = functionMap.get(msg.name);
      if (f != null) {
        return f.apply(iprot, msg.seqid);
      } else {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        return exception(msg.name, msg.seqid, TApplicationException.UNKNOWN_METHOD, "Invalid method name: '" + msg.name + "'");
      }
    } catch (Exception e) {
      return Future.exception(e);
    }
  }

  // ---- end boilerplate.
}